#!/bin/bash

#	HPC Instance Manager Â© 2015 Data Shades
#	Developed by shane.davis@linkdigital.com.au

#	The MIT License (MIT)

# build-cluster: Requests AWS spot instances to be started within the defined placement group

# --------------------------------------------------------------------------
# Script Defaults

az_group=cloud-hpc
max_price=.6
cluster_size=8
launch_type=c4.4xlarge
placement_group=CLOUD-HPC

# --------------------------------------------------------------------------
# User command line parameters

while getopts ":a:p:s:t:g:?:" opt; do
  case $opt in
    a) az_group="$OPTARG"
    ;;
    p) max_price="$OPTARG"
    ;;
    s) cluster_size="$OPTARG"
    ;;
    t) launch_type="$OPTARG"
    ;;
    g) placement_group="$OPTARG"
    ;;
    ?) echo -e "-a azgroup. Default: cloud-hpc"
	echo -e "-p max spot bid price per hour. Default: .6"
	echo -e "-s cluster size. Number of compute nodes in cluster. Default: 4"
	echo -e "-t AWS instance type. Default: c4.4xlarge"
	echo -e "-g VPC placement group. Default: CLOUD-HPC"
	exit 0
    ;;
    \?) echo "Invalid option -$OPTARG" >&2
	exit 1
    ;;
  esac
done


# --------------------------------------------------------------------------
# Cluster provisioning functionality

launch_group=${az_group}

# Tell the user what's going to happen
echo -e "Creating Slurm Compute Nodes:"
echo -e "\taz group: ${az_group}"
echo -e "\tmax price: ${max_price} per hour"
echo -e "\tcluster size: ${cluster_size} compute nodes"
echo -e "\tinstance type: ${launch_type}"
echo -e "\tplacement group: ${placement_group}"

# AWS variables for running CLI commands
placement=$(wget -q -O - http://169.254.169.254/latest/meta-data/placement/availability-zone)
region=$(echo ${placement%?})
launchaz=$placement;

# Get the tags for this instance
myid=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
tags=$(ec2-describe-tags --region $region --filter "resource-id=$myid")

# Get the DNS HostedZone so the compute node DNS records can be updated
zone_id=$(echo "$tags" | grep ZoneID | awk '{print $5}')

# Find the current Node AMI based on the AMI Name tag = SLURM-NODE-GM
amitags=$(ec2-describe-tags --region $region --filter "resource-type=image" --filter "value=SLURM-NODE-GM")
ami_id=$(echo "$amitags" | awk '{print $3}')

# Fixed variables for AWS CLI
PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
export JAVA_HOME=/usr/lib/jvm/jre
export EC2_AMITOOL_HOME=/opt/aws/amitools/ec2
export EC2_HOME=/opt/aws/apitools/ec2

# Request $cluser_size spot instances in Control-Node's region with:
#
# Firewall rules for: All local hosts, Admin-Access
# Detailed monitoring
# AutoManage AMI role so nodes can update their DNS records etc
# hpc-admin SSH key
#
echo -e "Requesting Spot Instances\r\n"
request=$(ec2-request-spot-instances ${ami_id} -p ${max_price} -n ${cluster_size} --launch-group ${launch_group} --placement-group $placement_group --availability-zone-group ${az_group} -g "Admin-Access" -g "Local Traffic" -k hpc-admin -t ${launch_type} -z ${launchaz} --monitor --iam-profile AutoManage --region ${region})
echo $request

echo -e "Wait for instances to start then /sbin/reboot-cluster\r\n"

